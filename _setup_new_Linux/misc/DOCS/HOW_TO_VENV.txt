There are multiple ways to work with Python virtual environments.

The recommended way is to use "venv" module.
    - included into standard python library since Python 3.3
    - subset of original virtualenv (except support for python 2.* and some minor features)
    - endorsed by PyPA (Python Packaging Authority)
    - https://www.pypa.io/en/latest/
    - https://docs.python.org/3/tutorial/venv.html

Here are some commands from "venv" tutorial:
# --------------------------------------------------------------
cd
mkdir envs
cd envs
python3 -m venv tutorial-env

source tutorial-env/bin/activate        # in bash shell
source tutorial-env/bin/activate.fish   # in fish shell
tutorial-env\Scripts\activate.bat       # on Windows

cd tutorial-env

        ./bin
        ./include
        ./lib/python3.8/site-packages/pip

env | grep -i path

    PATH=/Users/levselector/envs/tutorial-env/bin:......
    _OLD_VIRTUAL_PATH=...

which python
    /Users/levselector/envs/tutorial-env/bin/python -> /Users/levselector/anaconda3/bin/python

which pip
    /Users/levselector/brett_env/bin/pip    # python script

You can run pip install commands, for example:

    python -m pip install novas
    python -m pip install requests==2.6.0
    python -m pip install --upgrade requests
    pip show requests
    pip list
    pip freeze > requirements.txt
    python -m pip install -r requirements.txt

you can restore previous default environment
and reset $PATH to original value

    deactivate

# --------------------------------------------------------------
Here are links for virtualenv, venv, and some other utilities:

  virtualenv
    - original tool written by Ian Bicking (who also wrote "pip")
    - https://www.ianbicking.org/
    - https://pypi.org/project/virtualenv/
    - https://virtualenv.pypa.io/en/latest/
    - https://www.youtube.com/watch?v=N5vscPTWKOk
    - https://github.com/pypa/virtualenv

  venv
    - included into standard python library since Python 3.3
    - endorsed by PyPA (Python Packaging Authority
    - https://www.pypa.io/en/latest/

  pyvenv
    - deprecated in Python 3.6

  pyenv
    - pure shell tool
    - https://github.com/pyenv/pyenv
    - https://k0nze.dev/posts/install-pyenv-venv-vscode/
    - https://github.com/pyenv/pyenv-virtualenv

  virtualenvwrapper
    - a set of extensions to Ian Bickings virtualenv tool
    - useful when you have many environments to switch between
    - https://virtualenvwrapper.readthedocs.io/en/latest/

  pipenv
    - combining pip and virtualenv into one command
    - https://github.com/pypa/pipenv

  conda
    - creates virtual environments under anaconda3/envs/

See some comparisons for example here:

https://stackoverflow.com/questions/41573587/what-is-the-difference-between-venv-pyvenv-pyenv-virtualenv-virtualenvwrappe

# --------------------------------------------------------------
conda offers its own mechanisms to manage virtual environments.
The environments will be created under the main anaconda directory,
for example:
   anaconda3/envs/myenv1/
   anaconda3/envs/myenv2/

It is OK to use it on your local machine.
But for environment with many developers, it is probably safer
to use "venv" instead of "conda", because with "venv" each
user will create his environments in separate directories as needed
and will not have to mess with the main anaconda directory.

Here is a user guide for "conda" commands:

https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html

# --------------------------------------------------------------

