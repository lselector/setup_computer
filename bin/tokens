#!/bin/bash
# Function to estimate tokens in a text file using perl
estimate_tokens() {
    local file=$1
    if [ ! -f "$file" ]; then
        echo "Error: File '$file' not found." >&2
        return 1
    fi
    
    # Use perl to process the file in a single pass with handling for unusual characters
    local estimate=$(perl -e '
        $file = $ARGV[0];
        open(my $fh, "<:raw", $file) or die "Could not open file $file: $!";
        
        $word_count = 0;
        $char_count = 0;
        $punct_count = 0;
        
        while (my $line = <$fh>) {
            # Count bytes
            $char_count += length($line);
            
            # Try to safely handle encoding issues by replacing invalid UTF-8
            $safe_line = $line;
            $safe_line =~ s/[^\x00-\x7F]/ /g; # Replace non-ASCII with spaces
            
            # Count words (crude but effective across encodings)
            $word_count += scalar(split(/\s+/, $safe_line)) - 1;
            
            # Count punctuation
            $punct_count += () = $safe_line =~ /[.,!?;:()\[\]{}"\-]/g;
        }
        
        # Add a small buffer for word count since we are being conservative
        $word_count = $word_count > 0 ? $word_count : 0;
        
        # Calculate estimates
        $basic_estimate = $word_count + ($punct_count / 2);
        $char_based_estimate = $char_count / 4;
        
        # Average both methods and round to nearest integer
        $final_estimate = int(($basic_estimate + $char_based_estimate) / 2 + 0.5);
        print $final_estimate;
    ' "$file")
    
    echo "$estimate"
}

# Main function
main() {
    if [ $# -eq 0 ]; then
        echo "Usage: $0 <file1> [file2] [file3] ..." >&2
        exit 1
    fi
    
    local total_tokens=0
    local file_count=0
    
    # Process each file
    for file in "$@"; do
        if [ -f "$file" ]; then
            tokens=$(estimate_tokens "$file")
            if [ $? -eq 0 ]; then
                printf "%7d : %s\n" "$tokens" "$file"
                total_tokens=$((total_tokens + tokens))
                file_count=$((file_count + 1))
            fi
        else
            echo "Warning: '$file' is not a file, skipping." >&2
        fi
    done
    
    # Print summary
    if [ $file_count -gt 1 ]; then
        echo "------------------------"
        printf "%7d : TOTAL (across %d files)\n" "$total_tokens" "$file_count"
    fi
}

# Execute main function with all arguments
main "$@"

