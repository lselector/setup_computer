=====================================
MacOS - install Python
=====================================

Here is my latest workflow to install Python 
and set up a modern, `uv`-managed environment 
from scratch on a new Mac laptop.

# -----------------------------------
First, change your default shell from zsh to bash.
chsh -s /bin/bash

and add to .bashrc:
export BASH_SILENCE_DEPRECATION_WARNING=1

and add to ~/.config/fish/config.fish:
set -gx BASH_SILENCE_DEPRECATION_WARNING 1

# -----------------------------------
# Install Homebrew
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

# careful - update .bashrc and config.fish to add brew to PATH

# -----------------------------------
# install python
    brew install python
    which python
    python --version

# -----------------------------------
# install uv
    curl -Ls https://astral.sh/uv/install.sh | sh
# Or use Homebrew if available:
    brew install astral-sh/uv/uv
    which uv 
    uv --version

# -----------------------------------
# Create a Standard Python Virtual Environment and activate it
    uv venv ~/.venvs/standard
    source ~/.venvs/standard/bin/activate (for zsh or bash)
    source ~/.venvs/standard/bin/activate.fish

# -----------------------------------
# Install Packages from requirements.txt file
    uv pip install -r requirements.txt
# or individual packages:
    uv pip install requests numpy pandas

# -----------------------------------
# Note - the above process doesn't do project-based manageemnt.
# If you want to create a projec wit toml fiel and lock file,
# you need to do:
    uv init           # Generates pyproject.toml
    uv add requests   # Adds packages, generates uv.lock

# -----------------------------------
# to update python to a newest version you would need
# to install the latest python, and recreate the virtual environment:
    brew upgrade python  # Gets the latest Python
    uv venv ~/.venvs/standard --python=3.X  # X = latest version
    uv pip install --upgrade --upgrade-strategy eager -r requirements.txt
    uv pip install -r requirements.txt
    uv pip install --upgrade somepackage

# -----------------------------------
To automatically activate python environment, add this:

~/.bashrc:   
    source /Users/levselector/.venvs/standard/bin/activate
~/.config/fish/config.fish: 
    source /Users/levselector/.venvs/standard/bin/activate.fish

# add this alias
alias which_shell='echo "bash = $BASH_VERSION; zsh = $ZSH_VERSION; fish = $FISH_VERSION; " '

# -----------------------------------
# Note: in your VSCode settings.json add this:
    "python.terminal.activateEnvironment": false,
    "python.defaultInterpreterPath": "~/.venvs/standard",
    "terminal.integrated.defaultProfile.osx": "bash"

# in PyCharm - go to Settings > Tools > Terminal 
  and change from "zsh" to "bash --login"

=====================================
=====================================
=====================================
=====================================
=====================================

If you want to install anaconda or miniconda:
    https://www.anaconda.com/distribution/
    https://docs.conda.io/en/latest/miniconda.html

If possible, use the command-line installer (shell script)
install in user's home directory

Make sure to add directories at the beginning of the PATH, for example:
    $HOME/miniconda3/condabin
    $HOME/miniconda3/bin

Conda y default activates the "base" environment.
See how to work with conda environments here:
  - https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html

To hide the environment (remove prefix from unix prompt)
run these two commands:
    conda config
    conda config --set changeps1 False

=====================================
Alternatively you can download and install Python from the main python website:
   https://www.python.org/downloads/

It gets installed here (example):
    /Library/Frameworks/Python.framework/Versions/3.12/bin/python3
    /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/

If you install another version (for example 3.13),
it will be installed like this:

    /Library/Frameworks/Python.framework/Versions/3.13/bin/python3
    /Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/

To select one of those environments you need to add 
corresponding "bin" environment to the path.
You can create two .bashrc files and switch like this:
    alias p12='source ~/.bashrc12'
    alias p13='source ~/.bashrc13'
In these files you add path like this (example):
    python_location=/Library/Frameworks/Python.framework/Versions/3.13/bin
    PATH="${python_location}:${PATH}"

If you have several versions, you can see them in
     /Library/Frameworks/Python.framework/Versions : 

        3.12/
        3.13/
        Current@ -> 3.12

You can change the link like this:
        sudo ln -snf 3.13 Current

also do this:
        cd /usr/local/bin
        sudo ln -snf python3 python
        sudo ln -snf python3.12 python3

Also open the folder /Applications/Python 3.x (x is the version you are running).
Double click the Install Certificates.command. 
It will open a terminal and install the certificate.
Repeat this twice.

=====================================
Installing modules:
        pip install --upgrade pip
        pip install -U -r python_requirements.txt

=====================================
Uninstalling old standard python
On Mac - Finder > Applications - delete Python

Then in terminal:

cd /usr/local/bin
fd -t l | grep python | xargs rm
fd -t l | grep 2to3 | xargs rm
fd -t l | grep idle3 | xargs rm
fd -t l | grep pip3 | xargs rm
fd -t l | grep pydoc3 | xargs rm
sudo rm -rf /Library/Frameworks/Python.framework/Versions

Then check PATH and PYTHONPATH env. vars
=====================================
